package fastutf8

// Taken from
var (
	utf8d = [...]byte{
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 00..1f
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20..3f
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40..5f
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 60..7f
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, // 80..9f
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, // a0..bf
		8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // c0..df
		0xa, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, // e0..ef
		0xb, 0x6, 0x6, 0x6, 0x5, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, // f0..ff
		0x0, 0x1, 0x2, 0x3, 0x5, 0x8, 0x7, 0x1, 0x1, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x1, // s0..s0
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // s1..s2
		1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, // s3..s4
		1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, // s5..s6
		1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // s7..s8
	}
)

var fast = [256]uint64{0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x6186186186180, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x12486306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x6492306300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x649218c300186, 0x6186186186186, 0x6186186186186, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x618618618618c, 0x6186186186198, 0x6186186186192, 0x6186186186192, 0x6186186186192, 0x6186186186192, 0x6186186186192, 0x6186186186192, 0x6186186186192, 0x6186186186192, 0x6186186186192, 0x6186186186192, 0x6186186186192, 0x6186186186192, 0x618618618619e, 0x6186186186192, 0x6186186186192, 0x61861861861a4, 0x61861861861aa, 0x61861861861aa, 0x61861861861aa, 0x61861861861b0, 0x6186186186186, 0x6186186186186, 0x6186186186186, 0x6186186186186, 0x6186186186186, 0x6186186186186, 0x6186186186186, 0x6186186186186, 0x6186186186186, 0x6186186186186, 0x6186186186186}

// Valid reports whether p consists entirely of valid UTF-8-encoded runes.
func Valid(s []byte) bool {
	var state uint64
	for _, b := range s {
		res := fast[b]
		state = res >> (state & 63)
	}
	return state&63 == 0
}

// RuneCount returns the number of runes in p.
func RuneCount(s []byte) int {
	var state uint64
	var cnt int
	for _, b := range s {
		res := fast[b]
		state = res >> (state & 63)
		if state&63 == 0 {
			cnt++
		}
	}
	return cnt
}
